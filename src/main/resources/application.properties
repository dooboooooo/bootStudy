spring.application.name=board

## 서버 포트 변경
server.port=80

## Maria DB 연결 - 4가지 항목 필수
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/bootex
spring.datasource.username=bootuser
spring.datasource.password=bootuser

<<<<<<< HEAD
# \uD14C\uC774\uBE14\uC744 !
# update : \uBCC0\uACBD \uC0AC\uD56D\uC774 \uC0DD\uAE30\uBA74 update(\uC81C\uC77C \uB9CE\uC774 \uC0AC\uC6A9)
# create : \uB9E4\uBC88 \uC0C8\uB85C \uC0DD\uC131
# create-drop : \uB9E4\uBC88 \uC0AD\uC81C\uD6C4 \uC0DD\uC131
# validate : \uC5D4\uD2F0\uD2F0 \uD074\uB798\uC2A4\uC640 \uD14C\uC774\uBE14\uC774 \uC815\uC0C1\uC801\uC73C\uB85C \uB9E4\uD551\uB418\uB294\uC9C0\uB9CC \uAC80\uC0AC\uD55C\uB2E4. \uB9CC\uC57D \uD14C\uC774\uBE14\uC774 \uC544\uC608 \uC874\uC7AC\uD558\uC9C0 \uC54A\uAC70\uB098, \uD14C\uC774\uBE14\uC5D0 \uC5D4\uD2F0\uD2F0\uC758 \uD544\uB4DC\uC5D0 \uB9E4\uD551\uB418\uB294 \uCEEC\uB7FC\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC73C\uBA74 \uC608\uC678\uB97C \uBC1C\uC0DD\uC2DC\uD0A4\uBA74\uC11C \uC560\uD50C\uB9AC\uCF00\uC774\uC158\uC744 \uC885\uB8CC\uD55C\uB2E4
=======
# update : 변경 사항이 생기면 update
# create : 매번 새로 생성
# create-drop : 매번 삭제후 생성
# validate : 엔티티 클래스와 테이블이 정상적으로 매핑되는지만 검사한다. 만약 테이블이 아예 존재하지 않거나, 테이블에 엔티티의 필드에 매핑되는 컬럼이 존재하지 않으면 예외를 발생시키면서 애플리케이션을 종료한다
>>>>>>> 36dfd62e86ba2074110e85bc6917afbf72685818
spring.jpa.hibernate.ddl-auto=update
# 실제 jpa의 구현체인 HiberNate가 동작하면서 발생하는 sql을 포멧팅해서 콘솔에 출력
spring.jpa.properties.hibernate.format_sql=true
<<<<<<< HEAD
# aws\uC5D0 \uC62C\uB9B4 \uB54C \uC704\uC544\uB798 \uB458 \uB2E4 false\uB85C \uBC14\uAFB8\uAE30(\uCFFC\uB9AC\uBB38\uC774 \uB178\uCD9C\uB418\uC9C0 \uC54A\uC74C)
# \uCF58\uC194\uC5D0 \uC2E4\uD589\uD55C \uCFFC\uB9AC\uBB38(sql) \uBCF4\uC5EC\uC904 \uAC83\uC778\uC9C0 \uACB0\uC815
spring.jpa.show-sql=true
=======
# 콘솔에 실행한 쿼리문(sql) 보여줄 것인지 결정
spring.jpa.show-sql=true
>>>>>>> 36dfd62e86ba2074110e85bc6917afbf72685818
